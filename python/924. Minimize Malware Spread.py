from collections import defaultdict
from Queue import Queue
class Solution(object):
    def bfs(self, neighbours, visited, root):
        a, b = 0, 0
        q = Queue()
        q.put(root)
        visited[root] = True
        if root in self.infections: a += 1
        else: b += 1
        while q.qsize():
            i = q.get()
            for j in neighbours[i]:
                if not visited[j]:
                    visited[j] = True
                    q.put(j)
                    if j in self.infections: a += 1
                    else: b += 1
        return a, b
                    
    
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        n = len(graph)
        neighbours = defaultdict(list)
        for i in range(n):
            for j in range(n):
                if i != j and graph[i][j]: neighbours[i].append(j)
        maxCnt = 0
        initial.sort()
        ans = initial[0]
        self.infections = {}
        for node in initial:
            self.infections[node] = True
        visited = [False] * n
        
        for node in initial:
            if visited[node]: continue
            a, b = self.bfs(neighbours, visited, node)
            if a == 1 and b > maxCnt:
                maxCnt = b
                ans = node
        return ans