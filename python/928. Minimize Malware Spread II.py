from Queue import Queue
from collections import defaultdict
class Solution(object):
    def bfs(self, neighbours, node, visited, root):
        if root == None: return False, 0
        q = Queue()
        q.put(root)
        visited[root] = True
        infected = True if root in self.infections else False 
        cnt = 1
        while q.qsize():
            i = q.get()
            for j in neighbours[i]:
                if not visited[j] and j != node:
                    visited[j] = True
                    q.put(j)
                    if j in self.infections: 
                        infected = True
                    cnt += 1
        return infected, cnt
        
    
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        maxCnt = 0
        ans = initial[0]
        n = len(graph)
        self.infections = {}
        for node in initial:
            self.infections[node] = True
        neighbours = defaultdict(list)
        for i in range(n):
            for j in range(n):
                if i != j and graph[i][j]: neighbours[i].append(j)
        for node in initial:
            visited = [False] * n
            cnt = 0
            for neighbour in neighbours[node]:
                if visited[neighbour]: continue
                infected, num = self.bfs(neighbours, node, visited, neighbour)
                if not infected: cnt += num
            if cnt > maxCnt: 
                ans = node    
                maxCnt = cnt
            elif cnt == maxCnt and node < ans:
                ans = node
        return ans